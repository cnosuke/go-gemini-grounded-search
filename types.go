// go-gemini-grounded-search/types.go
package search

import (
	"google.golang.org/genai" // UPDATED: Use the new SDK import path
)

// --- Harm Categories and Block Thresholds ---

// HarmCategory defines the type of harmful content for your application.
// These string constants should align with your expected JSON representation.
// Note: When creating genai.SafetySetting for the SDK, these string values
// will need to be mapped to the SDK's genai.HarmCategory (enum/int type).
type HarmCategory string

// Constants for HarmCategory (application-level)
const (
	HarmCategoryHarassment       HarmCategory = "HARM_CATEGORY_HARASSMENT"
	HarmCategoryHateSpeech       HarmCategory = "HARM_CATEGORY_HATE_SPEECH"
	HarmCategorySexuallyExplicit HarmCategory = "HARM_CATEGORY_SEXUALLY_EXPLICIT"
	HarmCategoryDangerousContent HarmCategory = "HARM_CATEGORY_DANGEROUS_CONTENT"
	HarmCategoryUnspecified      HarmCategory = "HARM_CATEGORY_UNSPECIFIED" // Note: Verify how the SDK's genai.HarmCategory handles unspecified or default cases.
)

// HarmBlockThreshold defines the threshold for blocking harmful content for your application.
// These string constants should align with your expected JSON representation.
// Note: When creating genai.SafetySetting for the SDK, these string values
// will need to be mapped to the SDK's genai.HarmBlockThreshold (enum/int type).
type HarmBlockThreshold string

// Constants for HarmBlockThreshold (application-level)
const (
	HarmBlockThresholdUnspecified   HarmBlockThreshold = "HARM_BLOCK_THRESHOLD_UNSPECIFIED" // Note: Verify how the SDK's genai.HarmBlockThreshold handles unspecified or default.
	HarmBlockThresholdBlockLow      HarmBlockThreshold = "BLOCK_LOW_AND_ABOVE"
	HarmBlockThresholdBlockMedium   HarmBlockThreshold = "BLOCK_MEDIUM_AND_ABOVE"
	HarmBlockThresholdBlockOnlyHigh HarmBlockThreshold = "BLOCK_ONLY_HIGH"
	HarmBlockThresholdBlockNone     HarmBlockThreshold = "BLOCK_NONE"
)

// SafetySetting configures the blocking of harmful content for a specific category.
// This uses your application-level string types. Conversion to SDK types is needed before API calls.
type SafetySetting struct {
	Category  HarmCategory       `json:"category"`
	Threshold HarmBlockThreshold `json:"threshold"`
}

// --- Grounding and Response Types ---

// GroundingAttribution represents a source that the Gemini model used
// to ground its generated content. This is a custom structure for your application.
type GroundingAttribution struct {
	// Title of the web page or document from which the content was sourced.
	// Note: The new SDK's genai.CitationSource may not directly provide a 'Title'.
	// This might need to be fetched from the URI or populated differently if required.
	Title string `json:"title,omitempty"`

	// URL of the source, likely derived from genai.CitationSource.URI.
	URL string `json:"url,omitempty"`

	// Snippet is a piece of text content extracted from the source
	// that directly contributed to the generated response.
	// Note: The new SDK's genai.CitationSource may not directly provide a 'Snippet'.
	// This might need to be populated by custom logic (e.g., fetching content from URI) if required.
	Snippet string `json:"snippet,omitempty"`

	// RawSource holds the underlying SDK's CitationSource type for access to more detailed
	// grounding information provided by the SDK.
	// It's not marshalled to JSON by default.
	RawSource *genai.Citation `json:"-"` // UPDATED: Was RawAttribution, now points to SDK's CitationSource
}

// Response is the structured output returned by methods like GenerateGroundedContent.
// It contains the text generated by the model and any grounding information.
type Response struct {
	// GeneratedText is the primary textual content generated by the Gemini model.
	GeneratedText string `json:"generated_text"`

	// GroundingAttributions lists the sources that the model cited.
	// These will be constructed by your application from the genai.Candidate.CitationMetadata.CitationSources.
	GroundingAttributions []GroundingAttribution `json:"grounding_attributions,omitempty"`

	// SearchSuggestions contains a list of related search queries, if provided by the API or model.
	// Note: Verify if and how the new genai SDK provides search suggestions. This field might need adjustment or removal.
	SearchSuggestions []string `json:"search_suggestions,omitempty"`

	// PromptFeedback contains feedback regarding the safety ratings of the input prompt.
	// This field will be populated from the new SDK's genai.PromptFeedback.
	PromptFeedback *genai.GenerateContentResponsePromptFeedback `json:"prompt_feedback,omitempty"`

	// Candidates gives access to all generated candidates from the model,
	// including safety ratings and other metadata. Typically, GeneratedText
	// is derived from the first candidate.
	// This field is not marshalled to JSON by default.
	// This field will be populated from the new SDK's []*genai.Candidate.
	Candidates []*genai.Candidate `json:"-"`

	// RawResponse holds the original response from the genai SDK for advanced use cases.
	// This field is not marshalled to JSON by default.
	// This field will be populated from the new SDK's *genai.GenerateContentResponse.
	RawResponse *genai.GenerateContentResponse `json:"-"`
}

// --- Request Parameter Types ---

// GenerationParams defines the parameters for a grounded content generation request.
// These parameters will generally be mapped to the new SDK's genai.GenerationConfig struct.
type GenerationParams struct {
	// Prompt is the input text or query for the model.
	Prompt string `json:"prompt"`

	// ModelName specifies the Gemini model to use for the request.
	// If empty, a default model specified at the client level will be used.
	ModelName string `json:"model_name,omitempty"` // This is usually part of the model client, not GenerationConfig.

	// Temperature controls the randomness of the output. Values typically range from 0.0 to 2.0.
	// Corresponds to genai.GenerationConfig.Temperature.
	Temperature *float32 `json:"temperature,omitempty"`

	// MaxOutputTokens sets the maximum number of tokens to generate in the response.
	// Corresponds to genai.GenerationConfig.MaxOutputTokens.
	MaxOutputTokens *int32 `json:"max_output_tokens,omitempty"`

	// TopK reduces the set of tokens to consider to the K most probable tokens at each step.
	// Corresponds to genai.GenerationConfig.TopK.
	TopK *int32 `json:"top_k,omitempty"`

	// TopP uses nucleus sampling, considering the smallest set of tokens whose cumulative probability exceeds P.
	// Corresponds to genai.GenerationConfig.TopP.
	TopP *float32 `json:"top_p,omitempty"`

	// CandidateCount is the number of generated response messages to return.
	// For Gemini API's non-streaming GenerateContent, this is typically 1.
	// Corresponds to genai.GenerationConfig.CandidateCount.
	CandidateCount *int32 `json:"candidate_count,omitempty"`

	// StopSequences is a list of sequences that will cause the model to stop generating.
	// Corresponds to genai.GenerationConfig.StopSequences (which is []string).
	StopSequences []string `json:"stop_sequences,omitempty"`

	// SafetySettings is a list of safety settings to apply to the request, overriding client defaults.
	// Note: These []*SafetySetting (application-level) will need to be converted to
	// []*genai.SafetySetting (SDK-level, using SDK enum types for Category and Threshold)
	// before being used in genai.GenerationConfig.SafetySettings.
	SafetySettings []*SafetySetting `json:"safety_settings,omitempty"`
}
